package org.cis1200;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.io.FileReader;
import java.io.IOException;
import java.time.Duration;

import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/** Tests for TwitterBot class */
public class TwitterBotTest {

    /*
     * The below test cases test whether your TwitterBot class itself is written
     * correctly. To generate a tweet of specific content, make a desiredTweet list
     * containing the words you want to appear in the tweet. Then, call
     * fixDistribution on desiredTweet. This should make your twitter bot generate
     * the desired tweet as a string when you call generateTweet with the length of
     * your tweet content (not including punctuations).
     *
     * These tests operate very similarly to our MarkovChain tests in its use of
     * `fixDistribution`, so make sure you know how to test MarkovChain before
     * testing this!
     */
    @Test
    public void simpleTwitterBotShortTest() {
        List<String> desiredTweet = new ArrayList<>(
                Arrays.asList(
                        "hello", "cis1200", "world", "!"
                )
        );
        String words = "0, simple test.\n"
                + "1, hello cis1200 world!\n"
                + "2, this is amazing.";
        StringReader sr = new StringReader(words);
        BufferedReader br = new BufferedReader(sr);
        TwitterBot t = new TwitterBot(br, 1);
        t.fixDistribution(desiredTweet);

        String expected = "hello cis1200 world!";
        String actual = t.generateTweet(3);
        assertEquals(expected, actual);
    }

    @Test
    public void simpleTwitterBotLongTest() {
        List<String> desiredTweet = new ArrayList<>(
                Arrays.asList(
                        "this", "comes", "from", "data", "with", "no", "duplicate", "words", ".",
                        "the", "end", "should", "come", "."
                )
        );
        String words = "0, The end should come here.\n"
                + "1, This comes from data with no duplicate words!";
        StringReader sr = new StringReader(words);
        BufferedReader br = new BufferedReader(sr);
        TwitterBot t = new TwitterBot(br, 1);
        t.fixDistribution(desiredTweet);

        String expected = "this comes from data with no duplicate words. the end should come.";
        String actual = TweetParser.replacePunctuation(t.generateTweet(12));
        assertEquals(expected, actual);
    }

    /*
     * This is the empty file test case.
     *
     * When your CSV file is empty, your program should create an empty MarkovChain.
     * An empty tweet should be generated by your bot.
     * No exceptions should be thrown and your program should not go into an
     * infinite loop!
     */
    @Test
    public void emptyFileCreatesEmptyTweet() {
        // Checks that your program does not go into an infinite loop
        assertTimeoutPreemptively(
                Duration.ofSeconds(10), () -> {
                    // No exceptions are thrown if file is empty
                    TwitterBot tb = new TwitterBot(
                            FileLineIterator.fileToReader("./files/empty.csv"), 2
                    );
                    // Checks that the bot creates an empty tweet
                    assertEquals(0, tb.generateTweet(10).length());
                }
        );
    }

    /* **** ****** **** WRITE YOUR TESTS BELOW THIS LINE **** ****** **** */
    // Note: make sure to test for punctuations using `isPunctuated`.

    @Test
    public void testTwitterBotConstructor() {
        MarkovChain mc = new MarkovChain();
        NumberGenerator ng = new RandomNumberGenerator();
        String words = "0, i love testing\n"
                + "1, it is so very fun!";
        StringReader sReader = new StringReader(words);
        BufferedReader bReader = new BufferedReader(sReader);
        List<String> twt = new ArrayList<>(
                Arrays.asList("it", "is", "so", "very", "fun"));
        List<String> twt2 = new ArrayList<>(
                Arrays.asList("i", "love", "testing"));
        mc.train(twt.iterator());
        mc.train(twt2.iterator());
        TwitterBot tBot = new TwitterBot(bReader, 1, ng);

        assertEquals(tBot.mc.chain.toString(), mc.chain.toString());
        assertEquals(tBot.ng, ng);
    }

    @Test
    public void writeStringToFileEmpty() {
        List<String> stringList = new ArrayList<>(List.of(""));
        StringReader sr = new StringReader("");
        BufferedReader br = new BufferedReader(sr);
        TwitterBot t = new TwitterBot(br, 1);
        t.writeStringsToFile(stringList, TwitterBot.PATH_TO_OUTPUT_TWEETS, false);
        try {
            FileReader fr = new FileReader(TwitterBot.PATH_TO_OUTPUT_TWEETS);
            BufferedReader br2 = new BufferedReader(fr);
            assertEquals("", br2.readLine());
        } catch (IOException failTest) { }
    }

    @Test
    public void writeStringToFileTestManyData() {
        List<String> strings = new ArrayList<>(Arrays.asList("this", "comes", "from", "data", "."));
        StringReader sr = new StringReader("");
        BufferedReader br = new BufferedReader(sr);
        TwitterBot t = new TwitterBot(br, 1);
        t.writeStringsToFile(strings, TwitterBot.PATH_TO_OUTPUT_TWEETS, false);
        try {
            FileReader fr = new FileReader(TwitterBot.PATH_TO_OUTPUT_TWEETS);
            BufferedReader newBr = new BufferedReader(fr);
            assertEquals("this", newBr.readLine());
            assertEquals("comes", newBr.readLine());
            assertEquals("from", newBr.readLine());
            assertEquals("data", newBr.readLine());
            assertEquals(".", newBr.readLine());
        } catch (IOException failTest) { }
    }

    @Test
    public void writeStringToFileOneSingleData() {
        List<String> strings = new ArrayList<>(List.of("this"));
        StringReader sr = new StringReader("");
        BufferedReader br = new BufferedReader(sr);
        TwitterBot t = new TwitterBot(br, 1);
        t.writeStringsToFile(strings, TwitterBot.PATH_TO_OUTPUT_TWEETS, false);
        try {
            FileReader fr = new FileReader(TwitterBot.PATH_TO_OUTPUT_TWEETS);
            BufferedReader br2 = new BufferedReader(fr);
            assertEquals("this", br2.readLine());
        } catch (IOException failTest) { }
    }

    @Test
    public void testTwitterBotForColumn() {
        String words = "0, i want to sleep.\n"
                + "1, i need to finish the homework!";
        StringReader sr = new StringReader(words);
        BufferedReader br = new BufferedReader(sr);
        TwitterBot tBot = new TwitterBot(br, 10);
        String expected = "";
        String actual = TweetParser.replacePunctuation(tBot.generateTweet(8));
        assertEquals(expected, actual);
    }

    @Test
    public void testTwitterBotReaderIsNull() {
        assertThrows(IllegalArgumentException.class, () -> {
            new TwitterBot(null, 100);
        });
    }

    @Test
    public void testTwitterBotWithOneSentence() {
        List<String> desiredTweet = new ArrayList<>(
                Arrays.asList("i", "want", "to", "finish", "this", "homework", "."));
        String words = "0, there no time to sleep.\n"
                + "1, i want to finish this homework!";
        StringReader sr = new StringReader(words);
        BufferedReader br = new BufferedReader(sr);
        TwitterBot t = new TwitterBot(br, 1);
        t.fixDistribution(desiredTweet);
        String expected = "i want to finish this homework.";
        String actual = TweetParser.replacePunctuation(t.generateTweet(6));
        assertEquals(expected, actual);
    }

    @Test
    public void testGenerateTweetWithSymbols() {
        String words = "0, i want to cry\n"
                + "1, when can i finally sleep!";
        StringReader sr = new StringReader(words);
        BufferedReader br = new BufferedReader(sr);
        TwitterBot twtBot = new TwitterBot(br, 1);
        assertTrue(TwitterBot.isPunctuated(twtBot.generateTweet(5)));
    }

    @Test
    public void testTwitterBotEmpty() {
        StringReader sr = new StringReader("");
        BufferedReader br = new BufferedReader(sr);
        TwitterBot twtBot = new TwitterBot(br, 1);
        String expected = "";
        String actual = TweetParser.replacePunctuation(twtBot.generateTweet(5));
        assertEquals(expected, actual);
    }

    @Test
    public void testGenerateTweetWithZeroData() {
        String words = "0, i want to cry\n"
                + "1, when can i finally sleep!";
        StringReader sr = new StringReader(words);
        BufferedReader br = new BufferedReader(sr);
        TwitterBot twtBot = new TwitterBot(br, 1);
        assertEquals("", twtBot.generateTweet(0));
    }

    @Test
    public void testGenerateTweetWithNegatives() {
        String words = "0, i want to cry\n"
                + "1, when can i finally sleep!";
        StringReader sr = new StringReader(words);
        BufferedReader br = new BufferedReader(sr);
        TwitterBot twtBot = new TwitterBot(br, 1);
        assertThrows(IllegalArgumentException.class, () -> twtBot.generateTweet(-1));
    }
}